package edu.utep.trustlab.toolkitOperators.cmmf;
import edu.utep.trustlab.toolkitOperators.ToolkitOperator;
import edu.utep.trustlab.toolkitOperators.util.CommandRunner;


public class Feawd extends ToolkitOperator
{
	/* Is the data this operator processes encoded in ASCII?
	 * If you specify true, then (String stringData) variable will be populated.
	 * Otherwise, (byte[] binaryData) variable will be populated.
	 */
	private static final boolean isInputDataTextual = false;
	
	// Should the input dataset be persisted in a buffer?
	private static final boolean shouldPersistInMemory = false;
	
	// the output name for the dataset generated by this operator
	private static final String outputFileName = "Feawd_out.xml";
	
	public Feawd(String datasetURL) {
		super(datasetURL, isInputDataTextual, shouldPersistInMemory, outputFileName);
	}

	/*
	 * This method accesses the functionality of the wrapped executable. In this example, the exectuable takes
	 * three params (param1, param2, and param3). You can extend this to take as many parameters as necessary. This
	 * examples assume that the executable takes an input file path and an output file path, where the result will be written.
	 */
	public String transform(
			String np,
			String nsteps,
			String max_load_factor,
			String mat)
	{
		//The command string that will be passed to the shell
		// mpirun –np #np ./feawd –nsteps #steps -max_load_factor lf -snes_monitor 
		//      -save_all -hdf5_out -response -nodal_stres -mat Materials.Ext
		String cmd = 
			"mpirun -np " + np + " " +
			"feawd " +
			"–nsteps " + nsteps + " " +
			"-max_load_factor " + max_load_factor + " " +
			"-snes_monitor -save_all -hdf5_out -response -nodal_stress " +
			"-mat " + inputPath;
		
		CommandRunner.run(cmd);
		
		String[] outputFileNames = { "Feawd.out.h5", "Node_id.txt"};
		setUpMultipleOutputs(outputFileNames);
		
		return outputURL;
	}
}
