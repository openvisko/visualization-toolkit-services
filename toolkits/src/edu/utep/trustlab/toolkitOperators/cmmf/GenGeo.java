package edu.utep.trustlab.toolkitOperators.cmmf;
import edu.utep.trustlab.toolkitOperators.SimulationOperator;
import edu.utep.trustlab.toolkitOperators.util.CommandRunner;
import edu.utep.trustlab.toolkitOperators.util.FileUtils;


public class GenGeo extends SimulationOperator
{
	
	// the output name for the dataset generated by this operator
	private static final String outputFileName = "GenGeo_out.xml";
	
	public GenGeo(String contextURL) {
		super(contextURL, outputFileName);
	}

	/*
	 * This method accesses the functionality of the wrapped executable. In this example, the exectuable takes
	 * three params (param1, param2, and param3). You can extend this to take as many parameters as necessary. This
	 * examples assume that the executable takes an input file path and an output file path, where the result will be written.
	 */
	/* 
	   Jobname – base name for all subsequent files(string)
	   #grains – number of grains to be create in the sample (int)
	   scale – dimension of overall sample (float)
	*/
	public String transform(
			String jobname,
			String ngrains,
			String scale)
	{
		//The command string that will be passed to the shell
		// sh GenGeo jobname #grains scale
		String cmd =
			"sh /share/apps/cmmf/Gen_Poly/python_scripts/GenGeo " +
			jobname + " " +
			ngrains + " " +
			scale + " ";
		
		//FileUtils.getOutputURLPrefix();
		//FileUtils.getWorkspace();
		
		CommandRunner.run(cmd, FileUtils.getWorkspace());
		
		addOutputFile("pts", jobname + ".pts");
		addOutputFile("cfg", jobname + ".cfg");
		addOutputFile("vtk", jobname + ".vtk");
		
		return writeOutputContextXML();
	}
}